FUNCTION_BLOCK FB 1
TITLE =
VERSION : 0.1


VAR_INPUT
  lastScan : INT ;
  delta : INT ;
END_VAR
VAR_OUTPUT
  avgScan : INT ;
  fbState : INT ;
  resultsOK : BOOL ;
END_VAR
VAR
  arrayCounter : INT ;
  oldDelta : INT ;
  sumTotal : INT ;
  scanArray : ARRAY  [1 .. 100 ] OF //Array of scan times for results
  INT ;
END_VAR
BEGIN
NETWORK
TITLE =Select the state in which the program resides
// ---- Check if anew value has been detected ----
      L     #oldDelta; 
      L     #delta; 
      ==I   ; 
      JC    _end; 

// new value, remember this
      T     #oldDelta; 

// check the state array initial step?
      L     #fbState; 
      L     0; 
      ==I   ; 
      JC    init; 

//---- Check if er're building the array list ----
      POP   ; 
      L     1; 
      ==I   ; 
      JC    _bld; 

// ---- Check that we're running the FIFO ----
      POP   ; 
      L     2; 
      ==I   ; 
      JC    _cyc; 
NETWORK
TITLE =initial Step

init: NOP   0; 
//OPN   DI     1
//---- reset variables ----
      CLR   ; 
      =     #resultsOK; 
      L     0; 
      T     #avgScan; 
      L     1; 
      T     #arrayCounter; 

//---- Loop through the scanarray and populate with Zeroes ----      
      LAR1  P##scanArray; 
loop: L     B#16#AC; 
      T     DIW [AR1,P#0.0]; 
      L     100; 
      L     #arrayCounter; 
      <=I   ; 

      JC    lpEn; 
      L     16; //<<< 16 Bits - 1 Word
      +AR1  ; 

      L     1; 
      L     #arrayCounter; 
      +I    ; 
      T     #arrayCounter; 
      JU    loop; 
lpEn: NOP   0; 

//---- Next state - build the list ----
      L     1; 
      T     #fbState; 

//---- Reset arraycount afterwards ----
      L     0; 
      T     #arrayCounter; 

NETWORK
TITLE =Building the initial list

_bld: NOP   0; 
//OPN   DI     1
      CLR   ; 
      =     #resultsOK; 

//---- new value - load pointer and place new value into the correct location
      LAR1  P##scanArray; 
      L     #arrayCounter; 
      L     16; //<<< 16 Bits - 1 Word
      *I    ; 
      +AR1  ; 

      L     #lastScan; 
      T     DIW [AR1,P#0.0]; 

//---- increment counter ----
      L     #arrayCounter; 
      L     1; 
      +I    ; 
      T     #arrayCounter; 
      L     100; 
      >=I   ; 
      JCN   _end; 
//---- If we're here - The list is populated ----

      L     2; 
      T     #fbState; 
NETWORK
TITLE =one off sumtotal calculation
//Add all 100 samples in the scanarray array
//Can be done once, see average calculation for other calculation method
      L     #scanArray[1]; 
      L     #scanArray[2]; 
      +I    ; 
      L     #scanArray[3]; 
      +I    ; 
      L     #scanArray[4]; 
      +I    ; 
      L     #scanArray[5]; 
      +I    ; 
      L     #scanArray[6]; 
      +I    ; 
      L     #scanArray[7]; 
      +I    ; 
      L     #scanArray[8]; 
      +I    ; 
      L     #scanArray[9]; 
      +I    ; 
      L     #scanArray[10]; 
      +I    ; 
      L     #scanArray[11]; 
      +I    ; 
      L     #scanArray[12]; 
      +I    ; 
      L     #scanArray[13]; 
      +I    ; 
      L     #scanArray[14]; 
      +I    ; 
      L     #scanArray[15]; 
      +I    ; 
      L     #scanArray[16]; 
      +I    ; 
      L     #scanArray[17]; 
      +I    ; 
      L     #scanArray[18]; 
      +I    ; 
      L     #scanArray[19]; 
      +I    ; 
      L     #scanArray[20]; 
      +I    ; 
      L     #scanArray[21]; 
      +I    ; 
      L     #scanArray[22]; 
      +I    ; 
      L     #scanArray[23]; 
      +I    ; 
      L     #scanArray[24]; 
      +I    ; 
      L     #scanArray[25]; 
      +I    ; 
      L     #scanArray[26]; 
      +I    ; 
      L     #scanArray[27]; 
      +I    ; 
      L     #scanArray[28]; 
      +I    ; 
      L     #scanArray[29]; 
      +I    ; 
      L     #scanArray[30]; 
      +I    ; 
      L     #scanArray[31]; 
      +I    ; 
      L     #scanArray[32]; 
      +I    ; 
      L     #scanArray[33]; 
      +I    ; 
      L     #scanArray[34]; 
      +I    ; 
      L     #scanArray[35]; 
      +I    ; 
      L     #scanArray[36]; 
      +I    ; 
      L     #scanArray[37]; 
      +I    ; 
      L     #scanArray[38]; 
      +I    ; 
      L     #scanArray[39]; 
      +I    ; 
      L     #scanArray[40]; 
      +I    ; 
      L     #scanArray[41]; 
      +I    ; 
      L     #scanArray[42]; 
      +I    ; 
      L     #scanArray[43]; 
      +I    ; 
      L     #scanArray[44]; 
      +I    ; 
      L     #scanArray[45]; 
      +I    ; 
      L     #scanArray[46]; 
      +I    ; 
      L     #scanArray[47]; 
      +I    ; 
      L     #scanArray[48]; 
      +I    ; 
      L     #scanArray[49]; 
      +I    ; 
      L     #scanArray[50]; 
      +I    ; 
      L     #scanArray[51]; 
      +I    ; 
      L     #scanArray[52]; 
      +I    ; 
      L     #scanArray[53]; 
      +I    ; 
      L     #scanArray[54]; 
      +I    ; 
      L     #scanArray[55]; 
      +I    ; 
      L     #scanArray[56]; 
      +I    ; 
      L     #scanArray[57]; 
      +I    ; 
      L     #scanArray[58]; 
      +I    ; 
      L     #scanArray[59]; 
      +I    ; 
      L     #scanArray[60]; 
      +I    ; 
      L     #scanArray[61]; 
      +I    ; 
      L     #scanArray[62]; 
      +I    ; 
      L     #scanArray[63]; 
      +I    ; 
      L     #scanArray[64]; 
      +I    ; 
      L     #scanArray[65]; 
      +I    ; 
      L     #scanArray[66]; 
      +I    ; 
      L     #scanArray[67]; 
      +I    ; 
      L     #scanArray[68]; 
      +I    ; 
      L     #scanArray[69]; 
      +I    ; 
      L     #scanArray[70]; 
      +I    ; 
      L     #scanArray[71]; 
      +I    ; 
      L     #scanArray[72]; 
      +I    ; 
      L     #scanArray[73]; 
      +I    ; 
      L     #scanArray[74]; 
      +I    ; 
      L     #scanArray[75]; 
      +I    ; 
      L     #scanArray[76]; 
      +I    ; 
      L     #scanArray[77]; 
      +I    ; 
      L     #scanArray[78]; 
      +I    ; 
      L     #scanArray[79]; 
      +I    ; 
      L     #scanArray[80]; 
      +I    ; 
      L     #scanArray[81]; 
      +I    ; 
      L     #scanArray[82]; 
      +I    ; 
      L     #scanArray[83]; 
      +I    ; 
      L     #scanArray[84]; 
      +I    ; 
      L     #scanArray[85]; 
      +I    ; 
      L     #scanArray[86]; 
      +I    ; 
      L     #scanArray[87]; 
      +I    ; 
      L     #scanArray[88]; 
      +I    ; 
      L     #scanArray[89]; 
      +I    ; 
      L     #scanArray[90]; 
      +I    ; 
      L     #scanArray[91]; 
      +I    ; 
      L     #scanArray[92]; 
      +I    ; 
      L     #scanArray[93]; 
      +I    ; 
      L     #scanArray[94]; 
      +I    ; 
      L     #scanArray[95]; 
      +I    ; 
      L     #scanArray[96]; 
      +I    ; 
      L     #scanArray[97]; 
      +I    ; 
      L     #scanArray[98]; 
      +I    ; 
      L     #scanArray[99]; 
      +I    ; 
      L     #scanArray[100]; 
      +I    ; 
      T     #sumTotal; 

//---- scanArray is now set up - arraycounter purpose changes ----
      L     0; 
      T     #arrayCounter; 
      JU    _avg; 
NETWORK
TITLE =FIFO Operation - Shift the data in the array

_cyc: NOP   0; 
      S     #resultsOK; 
//---- set the address point to the oldest entry ----
      L     #arrayCounter; 
      L     16; 
      *I    ; 
      LAR1  P##scanArray; 
      +AR1  ; // Address register now points to the oldest entry
      L     #sumTotal; 
      L     DIW [AR1,P#0.0]; // oldest entry
      -I    ; // remove oldest entry
      L     #lastScan; // current entry

      T     DIW [AR1,P#0.0]; // replace oldest entry
      +I    ; // add the newest entry
      T     #sumTotal; //add new entry to sumtotal

// ---- Increment the pointer to point to the next element - the next oldest ----
      L     1; 
      L     #arrayCounter; 
      +I    ; 
      T     #arrayCounter; 
      L     100; 
      >=I   ; 
      JCN   _avg; 
      L     0; 
      T     #arrayCounter; 

NETWORK
TITLE =Calculate the rolling avareage

_avg: NOP   0; 
      L     #sumTotal; 
      L     100; 
      /I    ; 
      T     #avgScan; 

NETWORK
TITLE =END OPeration - Finish the cycle

_end: BE    ; 

END_FUNCTION_BLOCK
